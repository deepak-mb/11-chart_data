{"version":3,"sources":["reducers/chartReducer.js","reducers/index.js","actions/types.js","store.js","components/layout/Navbar.js","components/layout/Path.js","components/charts/GDPChart.js","actions/chartActions.js","components/charts/Battlefield.js","App.js","serviceWorker.js","index.js"],"names":["initialState","gdpdata","battlefielddata","combineReducers","chart","state","arguments","length","undefined","action","type","payload","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","window","__REDUX_DEVTOOLS_EXTENSION__","Navbar","react_default","a","createElement","className","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Component","Path","react_router_dom","to","GDPChart","populateGraph","labels","map","e","date","data","value","reverse","ctx","document","getElementById","getContext","Chart","datasets","label","backgroundColor","borderColor","options","this","props","getChartData","nextProps","connect","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","dispatch","wrap","_context","prev","next","axios","get","then","res","stop","_x","Battlefield","chartData","battlefieldDataArray","values","count","peak24","getBattlefieldData","_ref2","_callee2","_context2","_x2","App","react_redux_es","Navbar_Navbar","react_router","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.111b2cc2.chunk.js","sourcesContent":["import { GET_CHART_DATA, GET_BATTLEFIELD_DATA } from \"../actions/types\";\n\nconst initialState = {\n  gdpdata: [],\n  battlefielddata: \"\"\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case GET_CHART_DATA:\n      return {\n        gdpdata: action.payload\n      };\n\n    case GET_BATTLEFIELD_DATA:\n      return {\n        battlefielddata: action.payload\n      };\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport chartReducer from \"./chartReducer\";\n\nexport default combineReducers({\n  chart: chartReducer\n});\n","export const GET_CHART_DATA = \"GET_CHART_DATA\";\nexport const GET_BATTLEFIELD_DATA = \"GET_BATTLEFIELD_DATA\";\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  compose(\n    applyMiddleware(...middleware),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\n\nexport default store;\n","import React, { Component } from \"react\";\nexport default class Navbar extends Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\n        <a className=\"navbar-brand\" href=\"!#\">\n          ChartJS\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\" />\n        </button>\n\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav mr-auto\">\n            {/* <li className=\"nav-item active\">\n              <a className=\"nav-link\" href=\"#\">\n                Home <span className=\"sr-only\">(current)</span>\n              </a>\n            </li> */}\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default function Path() {\n  return (\n    <div className=\"my-3\">\n      <Link to=\"/\" className=\"btn btn-dark mx-2\">\n        GDP Graph\n      </Link>\n      <Link to=\"/battlefield\" className=\"btn btn-dark mx-2\">\n        Battlefield Stats Graph\n      </Link>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport { getChartData } from \"../../actions/chartActions\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport Chart from \"chart.js\";\n\nclass GDPChart extends Component {\n  state = {\n    gdpdata: \"\"\n  };\n  populateGraph = gdpdata => {\n    let labels = gdpdata.map(e => {\n      return e.date;\n    });\n    let data = gdpdata.map(e => {\n      return e.value;\n    });\n    labels = labels.reverse();\n    data = data.reverse();\n\n    var ctx = document.getElementById(\"myChart\").getContext(\"2d\");\n    var chart = new Chart(ctx, {\n      // The type of chart we want to create\n      type: \"bar\",\n\n      // The data for our dataset\n      data: {\n        labels: labels,\n        datasets: [\n          {\n            label: \"India's GDP Growth in US Dollars (1960 - 2018)\",\n            backgroundColor: \"rgb(255, 99, 132)\",\n            borderColor: \"rgb(255, 99, 132)\",\n            data: data\n          }\n        ]\n      },\n\n      // Configuration options go here\n      options: {}\n    });\n  };\n  componentDidMount() {\n    this.props.getChartData();\n  }\n  componentWillReceiveProps(nextProps) {\n    this.populateGraph(nextProps.gdpdata);\n  }\n  render() {\n    return (\n      <div>\n        <canvas id=\"myChart\" />\n        <div />\n      </div>\n    );\n  }\n}\n\nGDPChart.propTypes = {\n  gdpdata: PropTypes.array.isRequired,\n  getChartData: PropTypes.func.isRequired\n};\nconst mapStateToProps = state => ({\n  gdpdata: state.chart.gdpdata\n});\n\nexport default connect(\n  mapStateToProps,\n  { getChartData }\n)(GDPChart);\n","import { GET_CHART_DATA, GET_BATTLEFIELD_DATA } from \"./types\";\nimport axios from \"axios\";\n\n// Original data api: https://api.worldbank.org/countries/IND/indicators/NY.GDP.MKTP.CD?per_page=5000&format=json\n\nexport const getChartData = () => async dispatch => {\n  await axios\n    .get(\n      `https://gist.githubusercontent.com/deepak-mb/3969eb4a62efec51f6ccd653e73d187b/raw/170e228ecefcd34899dcb2bd4e24f32afdcd688d/India-GDP-Data.json`\n    )\n    .then(res => {\n      //   console.log(res.data);\n      dispatch({\n        type: GET_CHART_DATA,\n        payload: res.data\n      });\n    });\n};\n\nexport const getBattlefieldData = () => async dispatch => {\n  await axios.get(`https://api.bf4stats.com/api/onlinePlayers`).then(res => {\n    // console.log(res.data);\n    dispatch({\n      type: GET_BATTLEFIELD_DATA,\n      payload: res.data\n    });\n  });\n};\n","import React, { Component } from \"react\";\nimport { getBattlefieldData } from \"../../actions/chartActions\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport Chart from \"chart.js\";\n\nclass Battlefield extends Component {\n  state = {\n    chartData: \"\"\n  };\n  populateGraph = battlefielddata => {\n    const battlefieldDataArray = Object.values(battlefielddata);\n    let labels = battlefieldDataArray.map(e => {\n      return e.label;\n    });\n    let count = battlefieldDataArray.map(e => {\n      return e.count;\n    });\n    let peak24 = battlefieldDataArray.map(e => {\n      return e.peak24;\n    });\n    var ctx = document.getElementById(\"myChart\").getContext(\"2d\");\n    var chart = new Chart(ctx, {\n      // The type of chart we want to create\n      type: \"bar\",\n\n      // The data for our dataset\n      data: {\n        labels: labels,\n        datasets: [\n          {\n            label:\n              \"No of online players playing Battlefield 4 all around the world.\",\n            backgroundColor: [\n              \"darkgray\",\n              \"aquamarine\",\n              \"brown\",\n              \"burlywood\",\n              \"tomato\"\n            ],\n            borderColor: \"transparent\",\n            data: count\n          }\n        ]\n      },\n\n      // Configuration options go here\n      options: {}\n    });\n  };\n  componentDidMount() {\n    this.props.getBattlefieldData();\n  }\n  componentWillReceiveProps(nextProps) {\n    this.populateGraph(nextProps.battlefielddata);\n  }\n  render() {\n    return (\n      <div>\n        <canvas id=\"myChart\" />\n        <div />\n      </div>\n    );\n  }\n}\n\nBattlefield.propTypes = {\n  //   battlefielddata: PropTypes.array.isRequired,\n  getBattlefieldData: PropTypes.func.isRequired\n};\nconst mapStateToProps = state => ({\n  battlefielddata: state.chart.battlefielddata\n});\n\nexport default connect(\n  mapStateToProps,\n  { getBattlefieldData }\n)(Battlefield);\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\n// Components\nimport Navbar from \"./components/layout/Navbar\";\nimport Path from \"./components/layout/Path\";\nimport GDPChart from \"./components/charts/GDPChart\";\nimport Battlefield from \"./components/charts/Battlefield\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Router>\n          <Navbar />\n          <div className=\"container\">\n            <Path />\n            <Switch>\n              {/* <GDPChart /> */}\n              <Route exact path=\"/\" component={GDPChart} />\n              <Route exact path=\"/battlefield\" component={Battlefield} />\n            </Switch>\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}